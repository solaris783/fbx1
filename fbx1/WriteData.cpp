//
// Write all extracted data out
//



// sytem includes
#include <assert.h>


//
// project includes
//
#include "WriteData.h"




///////////////////////////////////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////////////////////////////////
WriteData::WriteData()
{
}




///////////////////////////////////////////////////////////////////////////////////////////
// Set the filename for the output file - based on the input file with an added extension
///////////////////////////////////////////////////////////////////////////////////////////
void WriteData::SetFilename(string input_filename)
{
	assert(input_filename.length() > 1);
	m_outputFilename = input_filename + ".res";
}




///////////////////////////////////////////////////////////////////////////////////////////
// Helper function to push a new vertex coordinate into the vertex stl::vector structure
///////////////////////////////////////////////////////////////////////////////////////////
void WriteData::RecordVertCoord(Vec3 *pVert)
{
	assert(pVert != NULL);
	m_fileData.meshData.vPos.push_back(*pVert);
}




///////////////////////////////////////////////////////////////////////////////////////////
// Helper function to push a new vertex color into the color stl::vector structure
///////////////////////////////////////////////////////////////////////////////////////////
void WriteData::RecordVertColor(ColorRGBA *pRgba)
{
	assert(pRgba != NULL);
	m_fileData.meshData.vColor.push_back(*pRgba);
}




/////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper function to push a new vertex texture coordinate into the texCoord stl::vector structure
////////////////////////////////////////////////////////////////////////////////////////////////////
void WriteData::RecordVertTexCoord(TexCoord *pTexCoord)
{
	assert(pTexCoord != NULL);
	m_fileData.meshData.vTex.push_back(*pTexCoord);
}




///////////////////////////////////////////////////////////////////////////////////////////
// Helper function to push a new vertex normal into the normal stl::vector structure
///////////////////////////////////////////////////////////////////////////////////////////
void WriteData::RecordVertNormal(Vec3 *pNorm)
{
	assert(pNorm != NULL);
	m_fileData.meshData.vNorm.push_back(*pNorm);
}




///////////////////////////////////////////////////////////////////////////////////////////
// Helper function to push a new vertex tangent into the tangent stl::vector structure
///////////////////////////////////////////////////////////////////////////////////////////
void WriteData::RecordVertTangent(Vec3 *pTang)
{
	assert(pTang != NULL);
	m_fileData.meshData.vTang.push_back(*pTang);
}




///////////////////////////////////////////////////////////////////////////////////////////
// Helper function to push a new vertex binormal into the binormal stl::vector structure
///////////////////////////////////////////////////////////////////////////////////////////
void WriteData::RecordVertBinormal(Vec3 *pBinorm)
{
	assert(pBinorm != NULL);
	m_fileData.meshData.vBinorm.push_back(*pBinorm);
}
